"""
This type stub file was generated by pyright.
"""

from typing import Callable

def spinner_player(spinner): # -> Generator[Any, Any, NoReturn]:
    """Create an infinite generator that plays all cycles of a spinner indefinitely."""
    ...

def bordered(borders, default): # -> Callable[..., _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any | tuple[()]]]:
    """Decorator to include controllable borders in the outputs of a function."""
    ...

def extract_fill_graphemes(text, default): # -> Generator[tuple[Any, *tuple[None, ...]] | tuple[()], None, None]:
    """Extract the exact same number of graphemes as default, filling missing ones."""
    ...

def static_sliding_window(sep, gap, contents, length, right, initial): # -> Generator[tuple[str, ...], Any, NoReturn]:
    """Implement a sliding window over some content interspersed with a separator.
    It is very efficient, storing data in only one string.

    Note that the implementation is "static" in the sense that the content is pre-
    calculated and maintained static, but actually when the window slides both the
    separator and content seem to be moved.
    Also keep in mind that `right` is for the content, not the window.
    """
    ...

def overlay_sliding_window(background, gap, contents, length, right, initial): # -> Generator[tuple[Any | str, ...], Any, None]:
    """Implement a sliding window over some content on top of a background.
    It uses internally a static sliding window, but dynamically swaps the separator
    characters for the background ones, thus making it appear immobile, with the
    contents sliding over it.
    """
    ...

def combinations(nums):
    """Calculate the number of total combinations a few spinners should have together,
    can be used for example with cycles or with frames played at the same time."""
    ...

def split_options(options): # -> tuple[Any, ...] | tuple[Any, Any]:
    """Split options that apply to dual elements, either duplicating or splitting."""
    ...

def spread_weighted(actual_length, naturals): # -> tuple[Any, ...]:
    """Calculate the weighted spreading of the available space for all natural lengths."""
    ...

def fix_signature(func: Callable, source: Callable, skip_n_params: int): # -> Callable[..., Any]:
    """Override signature to hide first n parameters."""
    ...

def round_even(n): # -> int:
    """Round a number to the nearest even integer."""
    ...

